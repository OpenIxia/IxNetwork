Doc version 1.0
Author: Hubert Gee
Date: 12/14/2017

Table of Contents
-----------------
	- Overview
	- Python and OS support
	- Requirements
	- Getting started
	- 3 configuration methods
	     1> Create a configuration from scratch
	     2> Load a saved JSON config file
	     3> Load a saved .ixncfg config file
	- 2 IxNetwork API servers.  Choices are:
	     1> Windows
	     2> Linux
	     (Windows Connection Manager is not supported for this app)
	- How to use ixnetCli.py
	- Modify existing configurations, rerun traffic and get stats.
	- showcommands()
	- Examples
	     1> Set your preference file name.  Default = preference.py
	     
	     2> Start by connecting to one of the API type of servers:
	        - Connecting to windows API server --> Enter:  connecttowindows()
	        - Connecting to Linux API server   --> Enter:  connecttolinux()

	     3> Select a method to make your configurations
	        - Create a configuration from scratch
	        - runjsonconfig():    Load a saved JSON config file
	        - runixncfgconfig():  Load a saved .ixncfg config file


Overview
--------
   - This is an IxNetwork ReST API application that emulates a CLI in a Python shell.
   - It is written in Python 3. Will work in Python 2 also.
   - This is intended for environments that configures simple configurations,
     send traffic and get stats.
   - This app allow users to use the CLI to modify traffic configurations, run and rerun traffic
     and get stats. 
   - This app uses the Python shell for CLI interactions.
   - All users have to do is enter the Python shell and enter "from ixnetCli import *" and 
     start entering CLI commands by calling function names.
   - The CLI commands are nothing but Python functions.
   - The Python functions are high level wrappers that calls functions in the the IxNetRestApi* modules.


Python and Feature support
--------------------------
   - This app supports Python 2.7 and Python 3+
   - Supports Python in both Linux and Windows based chassis.


Requirements
------------
   - IxNetwork 8.40 (minimum)
   - One of the following IxNetwork API servers:
        - Windows
        - Linux

   - Python "requests" module
   - IxNetwork API modules:
       - ixnetCli.py
       - IxNetRestApi.py
       - IxNetRestApiPortMgmt.py
       - IxNetRestApiFileMgmt.py
       - IxNetRestApiProtocolMgmt.py
       - IxNetRestApiTrafficMgmt.py
       - IxNetRestApiStatisticsMgmt.py
       - IxNetRestApiPortMgmt.py


    How to install the Python requests module
    ------------------------------------------

        - The requests module is a client-side tool to send ReST API commands.

        - If you are using Python version 2.7.9 to 2.7.14, you could do a "pip install requests".
            - If you're in a Linux environment, enter "which python" to get the path to your Python. 
            - If your Python path is: /usr/local/python2.7.9, then go to /usr/local/python2.7.9/bin and ...
            - Enter: sudo pip install requests 
            - Must have root privileges.

        - If you are using Python version 3+, follow the same steps as above.

        - If you are using Python version 2 prior to 2.7.9, make sure that you have pip installed. 
            - The earlier Python 2 versions don't come with PIP.
    	    - If you don't have PIP installed, then following the below steps to install it.
    	    - You must have root privilegs.
      
	    <Steps to install setuptools and install PIP>

	      In Linux:

	        - Enter: wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-8.2.1.tar.gz 
		- Enter: tar -xvf setuptools-8.2.1.tar.gz
		- Enter: cd setuptools-8.2.1
		- Enter: python setup.py install


    Where to get the IxNetRestApi modules
    --------------------------------------
       - Download/clone from Github:  https://github.com/IxNetwork
       - The full path to this application is: IxNetwork/RestApi/Python/Modules/Utilities/IxNetCli

Getting Started:
-----------------------
    Get the Python client-libraries and application.

    1> Clone from Github:  https://github.com/OpenIxia/IxNetwork.git

    2> Put all of the above files in a central network location where everybody has access to.

    3> Edit the preference.py file

       preference.py file

       IMPORTTANT:
          Copy the preference.py file to a different name and place it somewhere outside of your 
          cloned Github directory.  So in case you do an update from Github on this project, your 
          preference file will not get overwritten.

        The first thing you do is set up the preference.py file.
	This is where you state your chassis IP, API server IP and license server IP 
	and everything else so you don't have to enter them on CLI each time you run this application.

	Each user could have their own preference file because they could
	be using different chassis, ports and other default preferences.

	How to tell ixnetCli to use which preference file:

	      Enter:  setpreference('preference_<name>.py')


	- Preference file must have:
	    - The .py extension.
	    - Must begin with prefernce_
        
	- If you are going to create a preference file, always begin with "preference_" and append a name.
	  For example: preference_susan.py

	- Prefence files could be stored anywhere in your filesystem. Just include the path when you are 
	  entering setpreference('path_to_preference_file/preference_susan.py')

        
	Preference file example:
	
	    Important: Set the value to None if not applied.

	    jsonConfigFile = '/bgpJsonOriginal.json'
	    ixncfgConfigFile = 'bgp_ngpf_8.30.ixncfg'
	    apiServerType = 'windows' ;# Options: windows|linux

	    # For Windows
	    windowsApiServerIp = '192.168.70.127'
	    windowsApiServerIpPort = 11009

	    chassisIp = '192.168.70.11'
	    portList = [[chassisIp, 1,1], [chassisIp, 2,1]]

	    # For Linux API server only
	    linuxApiServerIp = '192.168.70.144'
	    linuxApiServerIpPort = 443
	    apiKey = 'eaebe82c72d541cfab384e911496b063'
	    username = 'admin'
	    password = 'admin'
	    licenseServerIp = '192.168.70.127'
	    licenseMode = 'subscription'
	    licenseTier = 'tier3'
	    deleteSessionAfterTest = True ;# For Linux only

	    forceTakePortOwnership = True
	    enableDebugTracing = False ;# Display Python error tracebacks
 

3 configuration methods
-----------------------
    1> Create a configuration from scratch
    2> Loading a saved JSON config file
    3> Loading a saved .ixncfg config file

    1> Create a configuration from scratch
       -----------------------------------
        - Currently, as of this writing, there is only a L2L3, BGP, MPLS templates available to create from scratch.
	- Enter: config("<bgpConfig.py>").
	         For example: If you created a config file called bgpConfig.py, then enter:
                              config('bgpConfig.py')
		 
	- The config() function resides in the application module ixnetCli.py.
	      - Reads the bgpConfig.py parameter file, which is a Python dict file.
	      - Configures a two port Topology (Tx and Rx ports).
	      - Start BGP protocol.
	      - Verifies ARP and BGP.

    2> Loading a saved JSON config file
       -----------------------------
           - On the IxNetwork GUI, make sure the configuration is good.
	   - Export the configuration into a JSON format file.
	   - Enter: runjsonconfig('<*.json file>') 

    3> Loading a saved .ixncfg config file
       -----------------------------
           - On the IxNetwork GUI, make sure the configuration is good.
	   - Do a save-as .ixncfg format file.
	   - Enter: runixncfgconfig('<*.ixncfg file>) 


2 IxNetwork API servers to use
------------------------------
Choices are:  Windows and Linux
	
    1> Windows
        - The Windows IxNetwork GUI is the ReST API server. Using port 11009.
	- Supports only 1 user session.

    2> Linux
        - Supports up to 10 concurrent user sessions.

        - The Linux API server comes in multiple methods:

	    1> Install the Linux API server in an XGS-HSL chassis. (Starting with 8.40)
	       This is an all-in-one chassis solution.

	    2> OVA or QCOW2 format installation for hypervisors (VMWare or KVM).


How to use ixnetCli.py
------------------------------------------
    - ixnetCli.py is the main module that you import in the Python Shell Interpreter.
    
    Example:

	 From a Linux or Windows OS prompt:

            Step 1:
	        Enter a Python shell:
		(If you are using Windows, you might have to enter the full path to your Python.exe) 
	           Enter: python  

            Step 2:
                Import the ixnetCli module
                   Enter: from ixnetCli import *

	    Step 3:
	        Connect to the API server:
	    	   Enter: connecttolinux() or connecttowindows()

	    Step 4:
	        Configure IxNetwork
		   Enter: config('bgpParams.py')

	    Step 5:
	        Enter: starttraffic()

	    Step 6:
	        Enter: getstats()

	 - To see all the CLI commands
	      Enter: showcommands() or showcommands('The_fucntion_name')

	 - Docstring support:

	      Enter: help('The_function_name')


Modify existing configurations, rerun traffic and get stats
-----------------------------------------------------------

    Once you are in the Python Shell, every CLI command is a
    Python syntax.  As you see below how to enter the CLI commands.    
    
    Notes:

       - Modifying Traffic Item requires the Traffic Item's name as the first parameter.
         In case there are more than one Traffic Items, this app will get the Traffic Item's
         object by filtering the name.

       - To see all of your configured Traffic Item name, enter:
             showtrafficitemnames() or showtrafficitems()

       - To get a description of each parameter, enter: help(<the_function_name>)	 


    As of this version of the DOC, this application supports the following traffic modifications:

        - configcustompayload(trafficItemName customRepeat customPattern)

	    Enter: configcustompayload('Topo1 to Topo2', True, 'deadbeef')

	- flapbgp(topologyName bgpName enableTrueOrFalse ipInterfaceList upTimeInSeconds downTimeInSeconds))

	    Enter: flapbgp('Topo1 to Topo2', 'bgp1', True, 30, 10)

	- setfixedframes(trafficItemName)

	    Enter: setfixedframes('Topo1 to Topo2')

	- setframerate(trafficItemName frameRate)

	    Enter: setframerate('Topo1 to Topo2', 75)

	- setframecount(trafficItemName frameCount)

	    Enter: setframecount('Topo1 to Topo2', 15000)

	- setframesize(trafficItemName frameSize)

	    Enter: setframesize('Topo1 to Topo2', 128)

	- settrafficcontinuous(trafficItemName)

	    Enter: settrafficcontinuous('Topo1 to Topo2')

	After modifying your configurations, start traffic and get stats:

	    Enter: starttraffic()
	    Enter: getstats()


help()
------
    - All the CLI functions in the main module ixnetCli.py has a docstring description
      that descibes the function and all the parameters.
    
    - Use help(<CLI function name>) to see how to use the function and its parameters.

showcommands()
--------------
    - showcommands():  To view all the available CLI functions.
    - showcommands('<function name>'):  To view individual CLI functions.

x
