{
    "ixnetwork_restpy.tests.traffic.traffic_over_vports.py": "\"\"\"Demonstrates creating a raw traffic item over vport endpoints.\n\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\ntest_platform.Trace = 'request_response'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\n\n# clear the configuration\nixnetwork.NewConfig()\n\n# create two vport objects\nvport_1 = ixnetwork.Vport.add()\nvport_2 = ixnetwork.Vport.add()\n\n# create a raw traffic item\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Raw Traffic Item Sample', TrafficType='raw', TrafficItemType='l2L3')\n\n# raw traffic endpoints must be Vport.Protocols objects\n# create an endpoint set using the Vport.Protocols objects\nendpoint_set = traffic_item.EndpointSet.add(Sources=vport_1.Protocols.find(), Destinations=vport_2.Protocols.find())\nassert (len(endpoint_set.Sources) == 1)\nassert (len(endpoint_set.Destinations) == 1)\n", 
    "ixnetwork_restpy.tests.classic.classic_interfaces.py": "\"\"\"Demonstrates adding interfaces to virtual ports.\n\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'none'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\n\n# clear the configuration\nixnetwork.NewConfig()\n\n# add a virtual port and get the interface object\ninterfaces = ixnetwork.Vport.add(Name='Test Port 1').Interface\n\n# add 10 interfaces\nfor i in range(1, 11):\n\tinterfaces.add(Description='Interface Demo %s' % i, Enabled=True)\n\n# verify they have been added on the server\nassert(len(interfaces.find()) == 10)\n", 
    "ixnetwork_restpy.tests.sanity.py": "\"\"\"Sanity script that exercises all major points in the IxNetwork REST API\n- sessions\n- properties returning objects\n- methods returning objects\n- tracing\n- authentication\n- file transfer\n- execs\n- multivalues\n- multivalue steps\n\"\"\"\nimport sys\nimport os\nimport json\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\nfrom ixnetwork_restpy.errors import IxNetworkError\nfrom ixnetwork_restpy.files import Files\n\nsessions = None\n\ntry:\n    # test_platform = TestPlatform('10.36.78.53', platform='linux')\n    test_platform = TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\n    test_platform.Trace = 'request_response'\n    test_platform.Authenticate('admin', 'admin')\n    print(test_platform)\n\n    sessions = test_platform.Sessions.add()\n    print(sessions)\n\n    ixnetwork = sessions.Ixnetwork\n    print(ixnetwork)\n\n    views = ixnetwork.Statistics.View.find()\n    print(views)\n\n    try:\n        ixnetwork.LoadConfig('c:/temp/ipv4_traffic.ixncfg')\n        assert ('Type checking failed')\n    except TypeError as e:\n        print(e)\n    ixnetwork.LoadConfig(Files('c:/users/anbalogh/downloads/ipv4_traffic.ixncfg', local_file=True))\n\n    print(ixnetwork.Globals)\n    print(ixnetwork.AvailableHardware)\n    print(ixnetwork.Traffic)\n    print(ixnetwork.Statistics)\n    print(ixnetwork.ResourceManager)\n    ixnetwork.NewConfig()\n    \n    assert(len(ixnetwork.Vport.find()) == 0)\n    assert(len(ixnetwork.Topology.find()) == 0)\n    assert(len(ixnetwork.AvailableHardware.Chassis.find()) == 0)\n    assert(len(ixnetwork.Statistics.View.find()) == 0)\n    assert(len(ixnetwork.Traffic.TrafficItem.find()) == 0)\n\n    vport_name = 'Abstract Port 1'\n    vports = ixnetwork.Vport.add(Name=vport_name, Type='pos')\n    assert (vports.Type == 'pos')\n    assert (vports.Name == vport_name)\n    vports.Type = 'ethernet'\n    assert (vports.Type == 'ethernet')\n    vports.refresh()\n    vports.add(Name='Abstract Port 2')\n    vports.add(Name='Abstract Port 3')\n    assert(len(vports) == 3)\n    vports.remove()\n    assert(len(vports) == 0)\n\n    # create 2 ports\n    vports.add().add()\n\n    # create a raw traffic item\n    traffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Raw Traffic Item Test', TrafficType='raw', TrafficItemType='l2L3')\n    protocols = vports.Protocols.find()\n    assert (len(protocols) == 2)\n    protocols.refresh()\n    assert (len(protocols) == 2)\n    endpoint_set = traffic_item.EndpointSet.add(Sources=protocols)\n    assert (len(endpoint_set.Sources) == 2)\n    mpls_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^mpls$')\n    ethernet_stack = traffic_item.ConfigElement.find()[0].Stack.find(StackTypeId='^ethernet$')\n    append_result = ethernet_stack.Append(mpls_protocol_template)\n\n    # create a topology\n    topology = ixnetwork.Topology.add(Name='Topology 1', Ports=vports)\n    assert(len(topology) == 1)\n\n    # create a device group\n    device_group = topology.DeviceGroup.add(Name='Device 1', Multiplier='7')\n    assert(len(device_group) == 1)\n    device_group.Enabled.Alternate('False')\n    assert (device_group.Enabled == 'Alt: False')\n    \n    # create and print ethernet information\n    ethernet = device_group.Ethernet.add()\n    assert(len(ethernet) == 1)\n\n    # get multivalue information\n    # # outputs format, count, possible patterns etc\n    print(ethernet.Mac.Info)\n\n    # multivalue steps\n    steps = ethernet.Mac.Steps()\n    for step in steps:\n        print(step)\n        step.Enabled = False\n        step.refresh()\n        assert (step.Enabled is False)\n        \n    # update multivalue on server immediately\n    ethernet.Mac.Decrement(start_value='00:00:de:ad:be:ef', step_value='00:00:fa:ce:fa:ce')\n    assert (ethernet.Mac == 'Dec: 00:00:de:ad:be:ef, 00:00:fa:ce:fa:ce')\n    ethernet.Mac.Increment(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef')\n    assert (ethernet.Mac == 'Inc: 00:00:fa:ce:fa:ce, 00:00:de:ad:be:ef')\n    ethernet.Mac.Random()\n    assert (ethernet.Mac == 'Rand')\n    ethernet.Mac.RandomRange()\n    assert (ethernet.Mac.Pattern.startswith('Randr:'))\n    ethernet.Mac.RandomMask()\n    assert (ethernet.Mac.Pattern.startswith('Randb:'))\n    ethernet.Mac.Distributed(algorithm='autoEven', mode='perPort', values=[('00:00:fa:ce:fa:ce', 60), ('0:00:de:ad:be:ef', 40)])\n    assert (ethernet.Mac.Pattern.startswith('Dist:'))\n    ethernet.Mac.ValueList(values=['00:00:fa:ce:fa:ce', '00:00:de:ad:be:ef'])\n    assert (ethernet.Mac.Pattern.startswith('List:'))\n    ethernet.Mac.Custom(start_value='00:00:fa:ce:fa:ce', step_value='00:00:de:ad:be:ef', increments=[('00:00:ab:ab:ab:ab', 6, [('00:00:01:01:01:01', 2, None)])])\n    assert (ethernet.Mac.Pattern.startswith('Custom:'))\n    print(ethernet.Mac.Values)\n    \n    ipv4 = ethernet.Ipv4.add(Name='Ipv4 1')\n    print(ipv4)\n    ipv4.Address.Increment(start_value='1.1.1.1', step_value='0.1.1.1')\n    assert(ipv4.Address == 'Inc: 1.1.1.1, 0.1.1.1')\n    \n    bgp4 = ipv4.BgpIpv4Peer.add(Name='Bgp 1')\n    bgp4.Md5Key.String('my-md5-key-{Dec: 1,1}')\n    print(bgp4)\n\n    # release all vports\n    ixnetwork.Vport.find().ReleasePort()\n\n    # add bgp6 in one line\n    bgp6 = topology.DeviceGroup.add(Name='Device 2').Ethernet.add().Ipv6.add().BgpIpv6Peer.add()\n    print(bgp6)\n\n    # add one quick flow group per vport\n    vports = ixnetwork.Vport.find()\n    vports.AddQuickFlowGroups(1)\n    \n    # number of quick flow groups should equal the number of vports\n    traffic_items = ixnetwork.Traffic.TrafficItem.find()\n    high_level_streams = traffic_items.HighLevelStream.find()\n\n    # errors = ixnetwork.Globals.AppErrors()[0].Error(Name='JSON Import Errors')\n    # for instance in errors[0].Instance():\n    # \tprint(instance)\n\n    # chassis = ixnetwork.AvailableHardware.add_Chassis(Hostname='10.36.24.55')\nexcept IxNetworkError as e:\n    print(e)\n\nif sessions is not None:\n    sessions.remove()\n\n\n", 
    "ixnetwork_restpy.tests.restapi_logging.py": "\nimport sys\nimport os\nsys.path[0] = os.path.abspath(sys.path[0] + '\\\\..\\\\..\\\\')\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n# default output is to the sys.stdout\n# to output to a log file, use the log_file_name param\n# default tracing is 'none' which is no tracing of request and response messages\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009, log_file_name='test.log')\nsessions = test_platform.Sessions.add()\n\n# trace requests\n# the next add vport should show a debug message for the request\nprint('LOG REQUEST ONLY')\ntest_platform.Trace='request'\nsessions.Ixnetwork.Vport.add()\n\n# trace requests and responses\n# the next add vport should show debug messages for the request and response\nprint('LOG REQUEST AND RESPONSES')\ntest_platform.Trace='request_response'\nsessions.Ixnetwork.Vport.add()\n\n# turn off tracing\n# the next add vport should not show debug messages for the request and response\nprint('LOG NOTHING')\ntest_platform.Trace='none'\nsessions.Ixnetwork.Vport.add()\n", 
    "ixnetwork_restpy.tests.traffic.traffic_over_protocols.py": "\"\"\"Demonstrates creating a traffic item that uses ipv4 endpoints.\n\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'request_response'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\n\n# clear the configuration\nixnetwork.NewConfig()\n\n# create 2 ipv4 endpoints\nipv4_1 = ixnetwork.Topology.add(Vports=ixnetwork.Vport.add()).DeviceGroup.add().Ethernet.add().Ipv4.add(Name='Ipv4 West')\nipv4_2 = ixnetwork.Topology.add(Vports=ixnetwork.Vport.add()).DeviceGroup.add().Ethernet.add().Ipv4.add(Name='Ipv4 East')\n\n# create an ipv4 traffic item\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Ipv4 Traffic Item Sample', TrafficType='ipv4', TrafficItemType='l2L3')\n\n# create an endpoint set using the ipv4 objects\nendpoint_set = traffic_item.EndpointSet.add(Sources=ipv4_1, Destinations=ipv4_2)\nassert (len(endpoint_set.Sources) == 1)\nassert (len(endpoint_set.Destinations) == 1)\nassert (len(traffic_item.ConfigElement.find().Stack.find(StackTypeId='ipv4')) == 1)\n", 
    "ixnetwork_restpy.tests.sessions.linux_sessions.py": "\"\"\" Demonstrates IxNetwork API server session configuration options on a linux platform\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# setup the connection information for a windows gui test platform that has a default session of 1\ntest_platform=TestPlatform('10.36.74.17', platform='linux')\ntest_platform.Trace = 'request_response'\n\n# authenticate with username and password\ntest_platform.Authenticate('admin', 'admin')\napi_key = test_platform.ApiKey\n\n# if username/password is not acceptable to the client due to the unencrypted password\n# an api key can be specified instead\n# the api key can be retrieved from the linux api server user settings and provided \n# to the TestPlatform.ApiKey property which will be used in subsequent server requests\ntest_platform.ApiKey = api_key\n\n# get a list of sessions\nfor session in test_platform.Sessions.find():\n    print(session)\n\n# add a session\nsessions = test_platform.Sessions.add()\nsession_id = sessions.Id\nprint(sessions)\n\n# remove the session\nsessions.remove()\nassert (len(sessions) == 0)\n\n# attempt to get the removed session\nsessions = test_platform.Sessions.find(session_id)\nassert(len(sessions) == 0)\n", 
    "ixnetwork_restpy.tests.ngpf_device_ids.py": "\"\"\"Demonstrates some best practices for specifying device ids when executing ngpf operations\n\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'request_response'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\nixnetwork.NewConfig()\n\n# create a b2b ngpf scenario\nvport_1 = ixnetwork.Vport.add().add().add()\nvport_2 = ixnetwork.Vport.add()\ntopologies = ixnetwork.Topology.add(Vports=vport_1).add(Vports=vport_2)\nipv4_1 = topologies[0].DeviceGroup.add().Ethernet.add().Ipv4.add()\nigmp_host = ipv4_1.IgmpHost.add()\nipv4_2 = topologies[1].DeviceGroup.add().Ethernet.add().Ipv4.add()\nigmp_querier = ipv4_2.IgmpQuerier.add()\n\n# get device ids for two specific ip addresses\nipv4_device_ids = ipv4_1.get_device_ids(Address='^(%s|%s)' % (ipv4_1.Address.Values[6], ipv4_1.Address.Values[24]))\nassert(len(ipv4_device_ids) == 2)\n\n# get device ids on two specific ports\nport_device_ids = ipv4_1.get_device_ids(PortNames='^(%s|%s)$' % (vport_1[0].Name, vport_1[2].Name))\nassert(len(port_device_ids) == 20)\n\n# get device ids for igmp v2 hosts on a specific port\nv2_device_ids = igmp_host.get_device_ids(PortNames='(?i)^%s$' % (vport_1[1].Name), VersionType='(?i)version2')\nassert(len(v2_device_ids) == 10)\n\nipv4_1.Start(ipv4_device_ids)\nigmp_host.IgmpMcastIPv4GroupList.Join(v2_device_ids)\n\n\n\n\n", 
    "ixnetwork_restpy.tests.ports.assign_ports.py": "\"\"\"Demonstrates the best practice for connecting vport(s) to hardware test ports.\n\nAssignPorts is currently the optimal method for connecting hardware test ports to vport(s).\n\nThe AssignPorts method on the test platform does the following:\n\t- adds chassis to /availableHardware using Arg1\n\t- creates abstract ports if the abstract port list (Arg3) cannot meet the number of Arg1 test ports\n\t- clears ownership of test ports if Arg4 is True\n\t- waits until port statistic view for all test ports are ready\n\t- returns a list of abstract test ports that have not been connected to test ports\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'request_response'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\nixnetwork.NewConfig()\n\n# add abstract ports\nvports = ixnetwork.Vport.find()\nfor i in range(2):\n\tvports.add(Name='Abstract Port %s' % i)\nprint(vports)\n\n# connect the abstract ports to test ports\nchassis_ip = '10.36.24.55'\ntest_ports = [\n\tdict(Arg1=chassis_ip, Arg2=1, Arg3=1),\n\tdict(Arg1=chassis_ip, Arg2=1, Arg3=2)\n]\nunconnected_ports = ixnetwork.AssignPorts(test_ports, [], vports, True)\n\n", 
    "ixnetwork_restpy.tests.sessions.windows_sessions.py": "\"\"\" Demonstrates IxNetwork GUI session configuration options on a windows platform\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# setup the connection information for a windows gui test platform that has a default session of 1\ntest_platform=TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\n\n# get a list of sessions\nfor session in test_platform.Sessions.find():\n\tprint(session)\n\n# add a session and remove the session\nsessions = test_platform.Sessions.add()\nprint(sessions)\nsessions.remove()\n\n# get an invalid session\nsessions = test_platform.Sessions.find(Id=6)\nassert(len(sessions) == 0)\n\n# get a valid session\nsessions = test_platform.Sessions.find(Id=1)\nassert(len(sessions) == 1)", 
    "ixnetwork_restpy.tests.traffic.traffic_custom_stack.py": "\"\"\"This sample demonstrates customizing a traffic item stack.\n\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'none'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\n\n# clear the configuration\nixnetwork.NewConfig()\n\n# create two vport objects\nvport_1 = ixnetwork.Vport.add()\nvport_2 = ixnetwork.Vport.add()\n\n# create a raw traffic item\ntraffic_item = ixnetwork.Traffic.TrafficItem.add(Name='Raw Traffic Item Sample', TrafficType='raw', TrafficItemType='l2L3')\nendpoint_set = traffic_item.EndpointSet.add(Sources=vport_1.Protocols, Destinations=vport_2.Protocols)\n\n# append protocol templates to the traffic item\nconfig_element = traffic_item.ConfigElement.find(EndpointSetId=1)\nethernet_stack = config_element.Stack.find(StackTypeId='^ethernet$')\n\n# get the protocol templates to be appended\nvlan_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^vlan$')\nipv4_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^ipv4$')\nudp_protocol_template = ixnetwork.Traffic.ProtocolTemplate.find(StackTypeId='^udp$')\n\n# append the protocol templates and get the newly appended stack object using the returned href\nvlan_stack = config_element.Stack.read(ethernet_stack.AppendProtocol(vlan_protocol_template))\nipv4_stack = config_element.Stack.read(vlan_stack.AppendProtocol(ipv4_protocol_template))\nudp_stack = config_element.Stack.read(ipv4_stack.AppendProtocol(udp_protocol_template))\n\n", 
    "ixnetwork_restpy.tests.files.save_load_config.py": "\"\"\"Demonstrates file handling.\n\nThe Files object determines how file content is uploaded.\nPrior to an operation if local_file=True is specified the content will be pushed to the server \nif the content exists locally.\nIf the file does not exist locally an empty file using only the file name will be created on the server. \n\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\nfrom ixnetwork_restpy.files import Files\n\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'request_response'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\n\n# create an empty configuration on the server\nixnetwork.NewConfig()\n\n# add 4 vport objects\nixnetwork.Vport.add().add().add().add()\n\n# save the configuration on the server\nixnetwork.SaveConfig(Files('sample.ixncfg'))\n\n# create an empty configuration\nixnetwork.NewConfig()\nassert(len(ixnetwork.Vport.find()) == 0)\n\n# load the saved configuration\nixnetwork.LoadConfig(Files('sample.ixncfg'))\n\n# verify that the vport objects exist\nassert(len(ixnetwork.Vport.find()) == 4)\n\n\n", 
    "ixnetwork_restpy.tests.classic.classic_bgp.py": "\"\"\"Demonstrates adding a bgp neighbor range to a virtual port.\n\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'none'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\n\n# clear the configuration\nixnetwork.NewConfig()\n\n# add a virtual port and get the interface object\nvport = ixnetwork.Vport.add(Name='Test Port 1')\n\n# add an interface\ninterface = vport.Interface.add(Enabled=True)\nipv4 = interface.Ipv4.add(Ip='1.1.1.1', Gateway='1.1.2.1')\n\n# enable bgp\nbgp = vport.Protocols.find().Bgp\nbgp.Enabled = True\n\n# add a bgp neighbor range\nneighbor_range = bgp.NeighborRange.add(Interfaces=interface, Enabled=True, EnableBgpId=True)\n\n# verify the neighbor range has been added on the server\nassert(len(neighbor_range.find()) == 1)\n", 
    "ixnetwork_restpy.tests.testplatform_connect.py": "\"\"\"Demonstrates different methods of configuration the TestPlatform object \nin order to connect to different IxNetwork test platforms.\n\n\"\"\"\n\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\n\n\n# connect to a windows platform using the default api server rest port\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009, platform='windows')\n\n# connect to a windows connection manager platform using the default api server rest port\ntest_platform = TestPlatform('127.0.0.1', platform='windows')\n\n# connect to a linux api server platform using the default api server rest port\ntest_platform = TestPlatform('127.0.0.1', platform='linux')\n\n\n", 
    "ixnetwork_restpy.tests.resource_manager.py": "\"\"\"Demonstrates some best practices for using resource manager to import and export the configuration as json\n\n\"\"\"\n\nimport json\nfrom ixnetwork_restpy.testplatform.testplatform import TestPlatform\nfrom ixnetwork_restpy.files import Files\n\n\n# connect to a test platform, create a session and get the root IxNetwork object\ntest_platform = TestPlatform('127.0.0.1', rest_port=11009)\ntest_platform.Trace = 'request_response'\nsessions = test_platform.Sessions.find(Id=1)\nixnetwork = sessions.Ixnetwork\n\n# create a configuration fragment of two virtual ports\nvports = [\n    {\n        'xpath': '/vport[1]',\n        'name': 'vport 1'\n    },\n    {\n        'xpath': '/vport[2]',\n        'name': 'vport 2'\n    }\n]\n\n# import the configuration fragment as a string\nixnetwork.ResourceManager.ImportConfig(json.dumps(vports), True)\nassert(len(ixnetwork.Vport.find()) == 2)\n\n# export the entire configuration as a string\nconfig = ixnetwork.ResourceManager.ExportConfig(['/descendant-or-self::*'], False, 'json')\n\n# import the entire configuration as a string\nixnetwork.ResourceManager.ImportConfig(config, True)\nassert(len(ixnetwork.Vport.find()) == 2)\n\n# export the entire configuration as a file\nixnetwork.ResourceManager.ExportConfigFile(['/descendant-or-self::*'], False, 'json', Files('two_vports.json'))\n\n# import then entire configuration from a file\nixnetwork.ResourceManager.ImportConfigFile(Files('two_vports.json'), True)\nassert(len(ixnetwork.Vport.find()) == 2)\n"
}